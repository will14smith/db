//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\will\Source\Repos\SimpleDatabase\SimpleDatabase.Parsing\Antlr\SQL.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleDatabase.Parsing.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		K_AS=10, K_ASC=11, K_BY=12, K_DELETE=13, K_DESC=14, K_EXPLAIN=15, K_FROM=16, 
		K_INSERT=17, K_INTO=18, K_ORDER=19, K_SELECT=20, K_VALUES=21, K_WHERE=22, 
		IDENTIFIER=23, NUMBER_LITERAL=24, STRING_LITERAL=25, WS=26;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_statement_select = 2, RULE_statement_insert = 3, 
		RULE_statement_insert_value = 4, RULE_statement_delete = 5, RULE_result_column = 6, 
		RULE_column_alias = 7, RULE_column_name = 8, RULE_ordering_term = 9, RULE_table_name = 10, 
		RULE_expression = 11, RULE_literal_value = 12;
	public static readonly string[] ruleNames = {
		"program", "statement", "statement_select", "statement_insert", "statement_insert_value", 
		"statement_delete", "result_column", "column_alias", "column_name", "ordering_term", 
		"table_name", "expression", "literal_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", "'.'", "'*'", "'='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "K_AS", "K_ASC", 
		"K_BY", "K_DELETE", "K_DESC", "K_EXPLAIN", "K_FROM", "K_INSERT", "K_INTO", 
		"K_ORDER", "K_SELECT", "K_VALUES", "K_WHERE", "IDENTIFIER", "NUMBER_LITERAL", 
		"STRING_LITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; statement();
			State = 31;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 27; Match(T__0);
					State = 28; statement();
					}
					} 
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 34; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Statement_selectContext statement_select() {
			return GetRuleContext<Statement_selectContext>(0);
		}
		public Statement_insertContext statement_insert() {
			return GetRuleContext<Statement_insertContext>(0);
		}
		public Statement_deleteContext statement_delete() {
			return GetRuleContext<Statement_deleteContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLParser.K_EXPLAIN, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_EXPLAIN) {
				{
				State = 37; Match(K_EXPLAIN);
				}
			}

			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SELECT:
				{
				State = 40; statement_select();
				}
				break;
			case K_INSERT:
				{
				State = 41; statement_insert();
				}
				break;
			case K_DELETE:
				{
				State = 42; statement_delete();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_selectContext : ParserRuleContext {
		public Result_columnContext _result_column;
		public IList<Result_columnContext> _Columns = new List<Result_columnContext>();
		public Table_nameContext Table;
		public ExpressionContext Where;
		public Ordering_termContext _ordering_term;
		public IList<Ordering_termContext> _Ordering = new List<Ordering_termContext>();
		public ITerminalNode K_SELECT() { return GetToken(SQLParser.K_SELECT, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLParser.K_FROM, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLParser.K_WHERE, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLParser.K_BY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Statement_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_selectContext statement_select() {
		Statement_selectContext _localctx = new Statement_selectContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(K_SELECT);
			State = 46; _localctx._result_column = result_column();
			_localctx._Columns.Add(_localctx._result_column);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 47; Match(T__1);
				State = 48; _localctx._result_column = result_column();
				_localctx._Columns.Add(_localctx._result_column);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; Match(K_FROM);
			State = 55; _localctx.Table = table_name();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 56; Match(K_WHERE);
				State = 57; _localctx.Where = expression(0);
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 60; Match(K_ORDER);
				State = 61; Match(K_BY);
				State = 62; _localctx._ordering_term = ordering_term();
				_localctx._Ordering.Add(_localctx._ordering_term);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 63; Match(T__1);
					State = 64; _localctx._ordering_term = ordering_term();
					_localctx._Ordering.Add(_localctx._ordering_term);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_insertContext : ParserRuleContext {
		public Table_nameContext Table;
		public Column_nameContext _column_name;
		public IList<Column_nameContext> _Columns = new List<Column_nameContext>();
		public Statement_insert_valueContext _statement_insert_value;
		public IList<Statement_insert_valueContext> _Values = new List<Statement_insert_valueContext>();
		public ITerminalNode K_INSERT() { return GetToken(SQLParser.K_INSERT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SQLParser.K_INTO, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLParser.K_VALUES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Statement_insert_valueContext[] statement_insert_value() {
			return GetRuleContexts<Statement_insert_valueContext>();
		}
		public Statement_insert_valueContext statement_insert_value(int i) {
			return GetRuleContext<Statement_insert_valueContext>(i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Statement_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_insertContext statement_insert() {
		Statement_insertContext _localctx = new Statement_insertContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(K_INSERT);
			State = 73; Match(K_INTO);
			State = 74; _localctx.Table = table_name();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 75; Match(T__2);
				State = 76; _localctx._column_name = column_name();
				_localctx._Columns.Add(_localctx._column_name);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 77; Match(T__1);
					State = 78; _localctx._column_name = column_name();
					_localctx._Columns.Add(_localctx._column_name);
					}
					}
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 84; Match(T__3);
				}
			}

			State = 88; Match(K_VALUES);
			State = 89; _localctx._statement_insert_value = statement_insert_value();
			_localctx._Values.Add(_localctx._statement_insert_value);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 90; Match(T__1);
				State = 91; _localctx._statement_insert_value = statement_insert_value();
				_localctx._Values.Add(_localctx._statement_insert_value);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_insert_valueContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Values = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Statement_insert_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_insert_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_insert_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_insert_valueContext statement_insert_value() {
		Statement_insert_valueContext _localctx = new Statement_insert_valueContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement_insert_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(T__2);
			State = 98; _localctx._expression = expression(0);
			_localctx._Values.Add(_localctx._expression);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 99; Match(T__1);
				State = 100; _localctx._expression = expression(0);
				_localctx._Values.Add(_localctx._expression);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_deleteContext : ParserRuleContext {
		public Table_nameContext Table;
		public ExpressionContext Where;
		public ITerminalNode K_DELETE() { return GetToken(SQLParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLParser.K_FROM, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLParser.K_WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_delete; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_delete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_deleteContext statement_delete() {
		Statement_deleteContext _localctx = new Statement_deleteContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement_delete);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(K_DELETE);
			State = 109; Match(K_FROM);
			State = 110; _localctx.Table = table_name();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 111; Match(K_WHERE);
				State = 112; _localctx.Where = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
	 
		public Result_columnContext() { }
		public virtual void CopyFrom(Result_columnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Result_column_exprContext : Result_columnContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLParser.K_AS, 0); }
		public Result_column_exprContext(Result_columnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Result_column_starContext : Result_columnContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Result_column_starContext(Result_columnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column_star(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 12, RULE_result_column);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new Result_column_starContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 115; table_name();
					State = 116; Match(T__4);
					}
				}

				State = 120; Match(T__5);
				}
				break;
			case 2:
				_localctx = new Result_column_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; expression(0);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS || _la==IDENTIFIER) {
					{
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 122; Match(K_AS);
						}
					}

					State = 125; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLParser.IDENTIFIER, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 14, RULE_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLParser.IDENTIFIER, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SQLParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLParser.K_DESC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 18, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; expression(0);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 135;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLParser.IDENTIFIER, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression_columnContext : ExpressionContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Expression_columnContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_column(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_equalityContext : ExpressionContext {
		public IToken Operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_equalityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_equality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_literalContext : ExpressionContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Expression_literalContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER_LITERAL:
			case STRING_LITERAL:
				{
				_localctx = new Expression_literalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 141; literal_value();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new Expression_columnContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 142; table_name();
					State = 143; Match(T__4);
					}
					break;
				}
				State = 147; column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_equalityContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 150;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 151;
					((Expression_equalityContext)_localctx).Operator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
						((Expression_equalityContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 152; expression(2);
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMBER_LITERAL() { return GetToken(SQLParser.NUMBER_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLParser.STRING_LITERAL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLVisitor<TResult> typedVisitor = visitor as ISQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_LITERAL || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xA3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '&', '\n', '\x2', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x34', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x37', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x44', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'G', '\v', 
		'\x4', '\x5', '\x4', 'I', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'R', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'U', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '_', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x62', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'h', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'k', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 't', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'y', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '~', '\n', '\b', 
		'\x3', '\b', '\x5', '\b', '\x81', '\n', '\b', '\x5', '\b', '\x83', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x8B', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x94', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x97', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x9C', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x9F', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x2', '\x3', '\x18', '\xF', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', 
		'\x5', '\x4', '\x2', '\r', '\r', '\x10', '\x10', '\x3', '\x2', '\t', '\v', 
		'\x3', '\x2', '\x1A', '\x1B', '\x2', '\xAB', '\x2', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', '/', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'J', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'n', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '!', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1E', '\a', 
		'\x3', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '&', '\a', '\x3', '\x2', '\x2', '%', '$', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\'', ')', '\a', '\x11', '\x2', '\x2', '(', '\'', 
		'\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', 
		'-', '\x3', '\x2', '\x2', '\x2', '*', '.', '\x5', '\x6', '\x4', '\x2', 
		'+', '.', '\x5', '\b', '\x5', '\x2', ',', '.', '\x5', '\f', '\a', '\x2', 
		'-', '*', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\a', '\x16', '\x2', '\x2', '\x30', '\x35', '\x5', 
		'\xE', '\b', '\x2', '\x31', '\x32', '\a', '\x4', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\xE', '\b', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x12', '\x2', '\x2', '\x39', '<', '\x5', 
		'\x16', '\f', '\x2', ':', ';', '\a', '\x18', '\x2', '\x2', ';', '=', '\x5', 
		'\x18', '\r', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', 'H', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'\x15', '\x2', '\x2', '?', '@', '\a', '\xE', '\x2', '\x2', '@', '\x45', 
		'\x5', '\x14', '\v', '\x2', '\x41', '\x42', '\a', '\x4', '\x2', '\x2', 
		'\x42', '\x44', '\x5', '\x14', '\v', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'H', '>', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\a', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x13', 
		'\x2', '\x2', 'K', 'L', '\a', '\x14', '\x2', '\x2', 'L', 'X', '\x5', '\x16', 
		'\f', '\x2', 'M', 'N', '\a', '\x5', '\x2', '\x2', 'N', 'S', '\x5', '\x12', 
		'\n', '\x2', 'O', 'P', '\a', '\x4', '\x2', '\x2', 'P', 'R', '\x5', '\x12', 
		'\n', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\x6', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'M', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x17', 
		'\x2', '\x2', '[', '`', '\x5', '\n', '\x6', '\x2', '\\', ']', '\a', '\x4', 
		'\x2', '\x2', ']', '_', '\x5', '\n', '\x6', '\x2', '^', '\\', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x5', '\x2', '\x2', '\x64', 'i', '\x5', '\x18', 
		'\r', '\x2', '\x65', '\x66', '\a', '\x4', '\x2', '\x2', '\x66', 'h', '\x5', 
		'\x18', '\r', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x6', '\x2', '\x2', 
		'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\xF', '\x2', '\x2', 
		'o', 'p', '\a', '\x12', '\x2', '\x2', 'p', 's', '\x5', '\x16', '\f', '\x2', 
		'q', 'r', '\a', '\x18', '\x2', '\x2', 'r', 't', '\x5', '\x18', '\r', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x16', '\f', 
		'\x2', 'v', 'w', '\a', '\a', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x83', '\a', '\b', 
		'\x2', '\x2', '{', '\x80', '\x5', '\x18', '\r', '\x2', '|', '~', '\a', 
		'\f', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x81', '\x5', '\x10', '\t', '\x2', '\x80', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x82', 'x', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x83', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\a', '\x19', '\x2', '\x2', '\x85', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\x19', '\x2', '\x2', '\x87', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x18', '\r', '\x2', 
		'\x89', '\x8B', '\t', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x19', '\x2', '\x2', 
		'\x8D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\b', '\r', 
		'\x1', '\x2', '\x8F', '\x97', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x91', 
		'\x5', '\x16', '\f', '\x2', '\x91', '\x92', '\a', '\a', '\x2', '\x2', 
		'\x92', '\x94', '\x3', '\x2', '\x2', '\x2', '\x93', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '\x12', '\n', '\x2', 
		'\x96', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', 
		'\f', '\x3', '\x2', '\x2', '\x99', '\x9A', '\t', '\x3', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', '\x18', '\r', '\x4', '\x9B', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\t', '\x4', '\x2', '\x2', '\xA1', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '!', '%', '(', '-', '\x35', '<', '\x45', 
		'H', 'S', 'X', '`', 'i', 's', 'x', '}', '\x80', '\x82', '\x8A', '\x93', 
		'\x96', '\x9D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SimpleDatabase.Parsing.Antlr
